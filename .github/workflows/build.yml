name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write

    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get Version from Package.swift
      id: get_version
      run: |
        VERSION=$(grep -A 1 'CFBundleShortVersionString' Sources/DockAppToggler/Info.plist | grep string | sed -E 's/<[^>]+>//g' | tr -d ' \t')
        echo "Extracted version: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Set up code signing
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/productsign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

    - name: Build and Package App
      run: |
        # Clean any previous build
        rm -rf DockAppToggler.app
        
        # Create app bundle structure
        mkdir -p DockAppToggler.app/Contents/{MacOS,Resources,Frameworks}
        
        # Resolve dependencies
        swift package resolve
        
        # Build for Apple Silicon (arm64)
        echo "Building for Apple Silicon (arm64)..."
        swift build -c release -Xswiftc "-swift-version" -Xswiftc "5.9" --arch arm64
        
        # Build for Intel (x86_64)
        echo "Building for Intel (x86_64)..."
        swift build -c release -Xswiftc "-swift-version" -Xswiftc "5.9" --arch x86_64
        
        # Create universal binary
        echo "Creating universal binary..."
        mkdir -p .build/universal/release
        lipo -create \
          .build/arm64-apple-macosx/release/DockAppToggler \
          .build/x86_64-apple-macosx/release/DockAppToggler \
          -output .build/universal/release/DockAppToggler
        
        # Copy universal binary
        cp .build/universal/release/DockAppToggler DockAppToggler.app/Contents/MacOS/
        chmod +x DockAppToggler.app/Contents/MacOS/DockAppToggler
        
        # Copy resources and Info.plist
        cp Sources/DockAppToggler/Resources/icon.icns DockAppToggler.app/Contents/Resources/ || echo "⚠️ Warning: icon.icns not found"
        cp Sources/DockAppToggler/Resources/icon.png DockAppToggler.app/Contents/Resources/ || echo "⚠️ Warning: icon.png not found"
        cp Sources/DockAppToggler/Resources/trayicon.png DockAppToggler.app/Contents/Resources/ || echo "⚠️ Warning: trayicon.png not found"
        cp Sources/DockAppToggler/Info.plist DockAppToggler.app/Contents/ || (echo "❌ Error: Info.plist not found" && exit 1)
        
        # Create PkgInfo
        echo "APPL????" > DockAppToggler.app/Contents/PkgInfo
        
        # Copy and configure Sparkle framework
        SPARKLE_PATH=$(find .build -name "Sparkle.framework" -type d | head -n 1)
        if [ -z "$SPARKLE_PATH" ]; then
          echo "❌ Error: Sparkle framework not found"
          exit 1
        fi
        ditto --rsrc "$SPARKLE_PATH" DockAppToggler.app/Contents/Frameworks/Sparkle.framework
        
        # Update install name
        install_name_tool -change "@rpath/Sparkle.framework/Versions/B/Sparkle" \
          "@executable_path/../Frameworks/Sparkle.framework/Versions/B/Sparkle" \
          DockAppToggler.app/Contents/MacOS/DockAppToggler
        
        # Sign Sparkle framework
        codesign --force \
          --options runtime \
          --sign "Developer ID Application: LimTec GmbH (${{ secrets.TEAM_ID }})" \
          --timestamp \
          --deep \
          DockAppToggler.app/Contents/Frameworks/Sparkle.framework
        
        # Ensure entitlements file exists and has proper permissions
        cat Sources/DockAppToggler/DockAppToggler.entitlements
        
        # Sign the main app with hardened runtime and entitlements
        codesign --force \
          --options runtime \
          --entitlements Sources/DockAppToggler/DockAppToggler.entitlements \
          --sign "Developer ID Application: LimTec GmbH (${{ secrets.TEAM_ID }})" \
          --timestamp \
          --deep \
          --strict \
          --verbose \
          DockAppToggler.app
        
        # Verify signing
        codesign -vv --deep --strict DockAppToggler.app
        
        # Verify architecture support
        echo "Verifying architecture support..."
        lipo -info DockAppToggler.app/Contents/MacOS/DockAppToggler
        
        # Create initial zip for notarization
        ditto -c -k --keepParent DockAppToggler.app DockAppToggler.zip

    - name: Notarize App
      env:
        ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
        ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
        ASC_KEY_CONTENT: ${{ secrets.ASC_KEY_CONTENT }}
      run: |
        # Create authentication key file
        echo "$ASC_KEY_CONTENT" > AuthKey.p8
        
        # Submit for notarization and wait
        xcrun notarytool submit DockAppToggler.zip \
          --key AuthKey.p8 \
          --key-id "$ASC_KEY_ID" \
          --issuer "$ASC_ISSUER_ID" \
          --wait \
          --timeout 30m
        
        # Staple the app
        xcrun stapler staple DockAppToggler.app
        
        # Create final distributions
        ditto -c -k --keepParent DockAppToggler.app DockAppToggler_final.zip
        
        # Create and notarize DMG
        mkdir -p dmg_root
        cp -R DockAppToggler.app dmg_root/
        ln -s /Applications dmg_root/Applications
        
        hdiutil create -volname "DockAppToggler" \
          -srcfolder dmg_root \
          -ov \
          -format UDZO \
          -fs HFS+ \
          -imagekey zlib-level=9 \
          DockAppToggler_final.dmg
        
        codesign --force \
          --sign "Developer ID Application: LimTec GmbH (${{ secrets.TEAM_ID }})" \
          --options runtime \
          --timestamp \
          --verbose \
          DockAppToggler_final.dmg
        
        xcrun notarytool submit DockAppToggler_final.dmg \
          --key AuthKey.p8 \
          --key-id "$ASC_KEY_ID" \
          --issuer "$ASC_ISSUER_ID" \
          --wait \
          --timeout 30m
        
        xcrun stapler staple DockAppToggler_final.dmg
        
        # Verify final DMG
        spctl --assess -vv --type install DockAppToggler_final.dmg

    - name: Generate Appcast
      env:
        SPARKLE_KEY: ${{ secrets.SPARKLE_KEY }}
      run: |
        mkdir -p release
        cp DockAppToggler_final.zip release/
        
        SPARKLE_PATH=".build/artifacts/sparkle/Sparkle/bin"
        if [ ! -f "$SPARKLE_PATH/generate_appcast" ]; then
          echo "❌ Error: Sparkle tools not found in $SPARKLE_PATH"
          exit 1
        fi
        
        "$SPARKLE_PATH/generate_appcast" \
          --download-url-prefix "https://github.com/LimTec-de/DockAppToggler/releases/download/v${{ env.VERSION }}/" \
          --ed-key-file - \
          release <<< "$SPARKLE_KEY"

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "v${{ env.VERSION }}" \
          --title "DockAppToggler v${{ env.VERSION }}" \
          --draft \
          DockAppToggler_final.zip \
          DockAppToggler_final.dmg \
          release/appcast.xml
