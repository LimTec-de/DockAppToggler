name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write

    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get Version from Package.swift
      id: get_version
      run: |
        VERSION=$(grep -A 1 'CFBundleShortVersionString' Sources/DockAppToggler/Info.plist | grep string | sed -E 's/<[^>]+>//g' | tr -d ' \t')
        echo "Extracted version: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Set up code signing
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/productsign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

    - name: Build and Package App
      env:
        ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
        ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
        ASC_KEY_CONTENT: ${{ secrets.ASC_KEY_CONTENT }}
      run: |
        # Clean any previous build
        rm -rf DockAppToggler.app
        
        # Resolve dependencies and build
        swift package resolve
        swift build -c release
        
        # Create app bundle
        mkdir -p DockAppToggler.app/Contents/{MacOS,Resources,Frameworks}
        cp .build/release/DockAppToggler DockAppToggler.app/Contents/MacOS/
        cp Sources/DockAppToggler/Info.plist DockAppToggler.app/Contents/
        cp Sources/DockAppToggler/Resources/icon.icns DockAppToggler.app/Contents/Resources/
        
        # Create PkgInfo file
        echo "APPL????" > DockAppToggler.app/Contents/PkgInfo
        
        # Set executable permissions
        chmod +x DockAppToggler.app/Contents/MacOS/DockAppToggler
        
        # Copy Sparkle framework
        SPARKLE_PATH=$(find .build -name "Sparkle.framework" -type d | head -n 1)
        if [ -z "$SPARKLE_PATH" ]; then
          echo "‚ùå Error: Sparkle framework not found"
          exit 1
        fi
        
        # Copy Sparkle framework maintaining symlinks
        ditto --rsrc "$SPARKLE_PATH" DockAppToggler.app/Contents/Frameworks/Sparkle.framework
        
        # Update install name
        install_name_tool -change "@rpath/Sparkle.framework/Versions/B/Sparkle" "@executable_path/../Frameworks/Sparkle.framework/Versions/B/Sparkle" DockAppToggler.app/Contents/MacOS/DockAppToggler
        
        # Sign the main app with hardened runtime
        codesign --force \
          --options runtime \
          --entitlements Sources/DockAppToggler/DockAppToggler.entitlements \
          --sign "Developer ID Application: LimTec GmbH (${{ secrets.TEAM_ID }})" \
          --timestamp \
          --deep \
          --strict \
          --verbose \
          DockAppToggler.app

        # Create zip for notarization
        ditto -c -k --keepParent DockAppToggler.app DockAppToggler.zip

        # Create authentication key file
        echo "$ASC_KEY_CONTENT" > AuthKey.p8

        # Notarize the app
        echo "üîç Submitting for notarization..."
        NOTARIZATION_OUTPUT=$(xcrun notarytool submit DockAppToggler.zip \
          --key AuthKey.p8 \
          --key-id "$ASC_KEY_ID" \
          --issuer "$ASC_ISSUER_ID" \
          --wait \
          --timeout 30m)
        echo "Notarization output: $NOTARIZATION_OUTPUT"
        
        # Extract submission ID using a more robust method
        SUBMISSION_ID=$(echo "$NOTARIZATION_OUTPUT" | grep -o "id: [a-f0-9-]\+" | head -n1 | cut -d' ' -f2)
        if [ -z "$SUBMISSION_ID" ]; then
          echo "‚ùå Error: Could not extract submission ID from output"
          exit 1
        fi
        echo "Extracted Submission ID: $SUBMISSION_ID"

        # Wait for notarization to complete and get status
        echo "üîç Checking notarization status..."
        if ! xcrun notarytool log \
          --key AuthKey.p8 \
          --key-id "$ASC_KEY_ID" \
          --issuer "$ASC_ISSUER_ID" \
          "$SUBMISSION_ID"; then
          echo "‚ùå Error: Failed to get notarization log"
          exit 1
        fi

        # Staple the app
        echo "üîç Stapling app..."
        xcrun stapler staple DockAppToggler.app
        
        # Verify stapling
        echo "üîç Verifying stapling..."
        xcrun stapler validate DockAppToggler.app
        spctl --assess -vv --type exec DockAppToggler.app

        # Create final distributions
        ditto -c -k --keepParent DockAppToggler.app DockAppToggler_final.zip
        
        # Create DMG
        echo "üì¶ Creating DMG..."
        mkdir -p dmg_root
        cp -r DockAppToggler.app dmg_root/
        ln -s /Applications dmg_root/Applications
        
        # First sign the Sparkle framework in the DMG copy
        codesign --force \
          --options runtime \
          --sign "Developer ID Application: LimTec GmbH (${{ secrets.TEAM_ID }})" \
          --timestamp \
          --deep \
          --verbose \
          dmg_root/DockAppToggler.app/Contents/Frameworks/Sparkle.framework
        
        # Then sign the app in the DMG folder
        codesign --force \
          --options runtime \
          --entitlements Sources/DockAppToggler/DockAppToggler.entitlements \
          --sign "Developer ID Application: LimTec GmbH (${{ secrets.TEAM_ID }})" \
          --timestamp \
          --deep \
          --strict \
          --verbose \
          --preserve-metadata=identifier,entitlements,flags,runtime \
          dmg_root/DockAppToggler.app
        
        # Create DMG with custom settings
        hdiutil create -volname "DockAppToggler" \
          -srcfolder dmg_root \
          -ov \
          -format UDZO \
          -fs HFS+ \
          -imagekey zlib-level=9 \
          DockAppToggler_final.dmg
        
        # Sign the DMG itself
        codesign --force \
          --sign "Developer ID Application: LimTec GmbH (${{ secrets.TEAM_ID }})" \
          --timestamp \
          --verbose \
          DockAppToggler_final.dmg
        
        # Clean up
        rm -rf dmg_root
        
        # Notarize the DMG
        echo "üîç Submitting DMG for notarization..."
        NOTARIZATION_OUTPUT=$(xcrun notarytool submit DockAppToggler_final.dmg \
          --key AuthKey.p8 \
          --key-id "$ASC_KEY_ID" \
          --issuer "$ASC_ISSUER_ID" \
          --wait \
          --timeout 30m)
        echo "DMG Notarization output: $NOTARIZATION_OUTPUT"
        
        # Extract submission ID for DMG
        SUBMISSION_ID=$(echo "$NOTARIZATION_OUTPUT" | grep -o "id: [a-f0-9-]\+" | head -n1 | cut -d' ' -f2)
        if [ -z "$SUBMISSION_ID" ]; then
          echo "‚ùå Error: Could not extract submission ID from DMG notarization output"
          exit 1
        fi
        echo "Extracted DMG Submission ID: $SUBMISSION_ID"

        # Check DMG notarization status
        echo "üîç Checking DMG notarization status..."
        if ! xcrun notarytool log \
          --key AuthKey.p8 \
          --key-id "$ASC_KEY_ID" \
          --issuer "$ASC_ISSUER_ID" \
          "$SUBMISSION_ID"; then
          echo "‚ùå Error: Failed to get DMG notarization log"
          exit 1
        fi

        # Staple the DMG
        echo "üîç Stapling DMG..."
        xcrun stapler staple DockAppToggler_final.dmg
        
        # Verify DMG stapling
        echo "üîç Verifying DMG stapling..."
        xcrun stapler validate DockAppToggler_final.dmg

    - name: Generate Appcast
      env:
        SPARKLE_KEY: ${{ secrets.SPARKLE_KEY }}
      run: |
        # Create release directory and copy only the zip file for updates
        mkdir -p release
        cp DockAppToggler_final.zip release/
        
        # Find Sparkle tools
        SPARKLE_PATH=".build/artifacts/sparkle/Sparkle/bin"
        if [ ! -f "$SPARKLE_PATH/generate_appcast" ]; then
          echo "‚ùå Error: Sparkle tools not found in $SPARKLE_PATH"
          exit 1
        fi
        
        # Use the key from stdin with the --ed-key-file option
        "$SPARKLE_PATH/generate_appcast" \
          --download-url-prefix "https://github.com/LimTec-de/DockAppToggler/releases/download/v${{ env.VERSION }}/" \
          --ed-key-file - \
          release <<< "$SPARKLE_KEY"

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "v${{ env.VERSION }}" \
          --title "DockAppToggler v${{ env.VERSION }}" \
          --draft \
          DockAppToggler_final.zip \
          DockAppToggler_final.dmg \
          release/appcast.xml
